# Generated by Django 3.2.3 on 2023-06-25 18:10

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import main.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('is_original', models.BooleanField(blank=True, default=True)),
                ('is_chained', models.BooleanField(blank=True, default=False)),
                ('is_clone', models.BooleanField(default=False, help_text='Will not change original if cloned.')),
                ('color_name', models.CharField(default='FFFFFF', max_length=7, verbose_name='Dialog name color')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], default='male', max_length=10)),
                ('kind', models.CharField(choices=[('human', 'Human'), ('monster', 'Monster')], default='human', max_length=10)),
                ('skin_color', models.CharField(choices=[('black', 'Black'), ('blue', 'Blue'), ('bronze', 'Bronze'), ('yellow', 'Yellow'), ('white', 'White')], default='white', max_length=10)),
                ('hair_color', models.CharField(choices=[('black', 'Black'), ('blonde', 'Blonde'), ('blue', 'Blue'), ('bold', 'Bold'), ('brunette', 'Brunette'), ('green', 'Green'), ('pink', 'Pink'), ('red', 'Red'), ('white', 'White')], default='black', max_length=10)),
                ('hairstyle', models.CharField(choices=[('bold', 'Bold'), ('long', 'Long'), ('medium', 'Medium'), ('short', 'Short')], default='short', max_length=10)),
                ('bio', models.TextField(blank=True, max_length=400, verbose_name='Biography')),
                ('gold', models.PositiveIntegerField(default=100)),
                ('health', models.PositiveSmallIntegerField(default=1000, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('energy', models.PositiveSmallIntegerField(default=1000, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('sleep', models.PositiveSmallIntegerField(default=1000, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('mood', models.PositiveSmallIntegerField(default=500, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('fighting', models.PositiveSmallIntegerField(default=100, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('magic', models.PositiveSmallIntegerField(default=100, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('intelligence', models.PositiveSmallIntegerField(default=500, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('pride', models.PositiveSmallIntegerField(default=500, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
            ],
        ),
        migrations.CreateModel(
            name='CharacterDataEffects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('effects', models.JSONField(blank=True, default=dict, help_text='Example: {"energy": 50, "health": 10, "mood": 15}')),
                ('effects_max', models.JSONField(blank=True, default=dict, help_text='Example: {"energy": 300, "mood": 800}')),
                ('effects_mods', models.JSONField(blank=True, default=dict, help_text='Example: {"positive": {"other": {"max": ["sleep", "health"], "exact": "energy"}}} Options: positive/negative, own/other, max/min/avg/exact. Calculating: attr_value/1000+0.5 = results in range 0.6-1.5. Example: attr value = 800. Positive = 1.3, Negative = 0.7.', verbose_name='Effects modifiers from character attrs')),
                ('effects_mods_value', models.FloatField(blank=True, help_text='Multiply effects_mods. Range: 0-10. Default: 1.', null=True, validators=[django.core.validators.MaxValueValidator(10)])),
                ('effects_place_mods', models.JSONField(blank=True, default=dict, help_text='Example: {"positive": {"max": ["safety", "beauty"], "exact": "fertility"}} Options: positive/negative, max/min/avg/exact.', verbose_name='Effects modifiers from place attrs')),
                ('settlement_effects', models.JSONField(blank=True, default=dict)),
                ('settlement_effects_max', models.JSONField(blank=True, default=dict)),
                ('place_settlement_effects', models.JSONField(blank=True, default=dict)),
                ('place_settlement_effects_max', models.JSONField(blank=True, default=dict)),
                ('needs_mods', models.JSONField(blank=True, default=dict, help_text='Example: {"energy": 1, "mood": 1}. Default is 1.')),
                ('relationships_effects', models.FloatField(blank=True, null=True)),
                ('relationships_effects_max', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('relationships_effects_min', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CharacterDataFilters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='Title')),
                ('is_interrupting', models.BooleanField(blank=True, default=False, help_text='Used for effects, interrupt plan if filters failed.')),
                ('filters', models.JSONField(blank=True, default=dict, verbose_name='Character filters')),
                ('plan_points_mods', models.JSONField(blank=True, default=dict, help_text='Example: {"positive": {"other": {"max": ["sleep", "health"], "exact": "energy"}}}. Options: positive/negative, own/other, max/min/avg/exact.', verbose_name='Points plan modifiers')),
                ('acceptance_points_base', models.JSONField(blank=True, default=dict, help_text='Base for acceptance points. Example: {"positive": {"other": {"max": ["sleep", "health"], "exact": "energy"}}}.', verbose_name='Points acceptance base')),
                ('acceptance_points_mods', models.JSONField(blank=True, default=dict, help_text='Example: {"positive": {"other": {"max": ["sleep", "health"], "exact": "energy"}}}. Options: positive/negative, own/other, max/min/avg/exact. Calculating: points_base * mod * 2 * mod_value', verbose_name='Modifiers for acceptance points')),
                ('faction_opinion_min', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)], verbose_name='Faction opinion min')),
                ('faction_opinion_max', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)], verbose_name='Faction opinion max')),
                ('relationships_min', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)], verbose_name='Personal relationships min')),
                ('relationships_max', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)], verbose_name='Personal relationships max')),
                ('acceptance_points_min', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)], verbose_name='Acceptance points min')),
                ('acceptance_points_max', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)], verbose_name='Acceptance points max')),
                ('acceptance_points_mod_value', models.FloatField(blank=True, help_text='Multiply effects_mods. Range: 0-10. Default: 1.', null=True, validators=[django.core.validators.MaxValueValidator(10)])),
            ],
            bases=(models.Model, main.utils.DescMixin),
        ),
        migrations.CreateModel(
            name='CharacterDataPlanFilters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='Title')),
                ('filters', models.JSONField(default=dict, help_text='Example: {"is_char_available": true, "id__nin": ["relax", "relax_home"]}', verbose_name='Plan filters')),
                ('is_random_weighted', models.BooleanField(default=False, help_text='More points more chances.')),
            ],
            bases=(models.Model, main.utils.DescMixin),
        ),
        migrations.CreateModel(
            name='Faction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='Title')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('is_locked', models.BooleanField(default=False)),
                ('place_type', models.CharField(choices=[('kitchen', 'Kitchen'), ('prison', 'Prison'), ('prison_cell', 'Prison cell'), ('region', 'Region'), ('settlement_gates', 'Settlement gates'), ('street', 'Street'), ('temple', 'Temple'), ('throne_room', 'Throne room'), ('entrance', 'Entrance'), ('hallway', 'Hallway'), ('living_room', 'Living room'), ('dining', 'Dining room'), ('bedroom', 'Bedroom')], default='region', max_length=50)),
                ('beauty', models.PositiveSmallIntegerField(default=500, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('fertility', models.PositiveSmallIntegerField(default=100, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('safety', models.PositiveSmallIntegerField(default=1000, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('population', models.PositiveSmallIntegerField(blank=True, default=0)),
                ('lock_filters', models.JSONField(blank=True, default=dict)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='place_owner', to='main.character')),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(blank=True, max_length=50)),
                ('is_char_available', models.BooleanField(default=False, verbose_name='Is char available')),
                ('is_player_available', models.BooleanField(default=False, verbose_name='Is player available')),
                ('is_encounter', models.BooleanField(default=False)),
                ('is_route', models.BooleanField(default=False, help_text='Will activate for all characters every time when they change location.')),
                ('is_ask_player', models.BooleanField(default=True, help_text='Ask player to be second if player is target.')),
                ('is_always_pause', models.BooleanField(default=False, verbose_name='Is always time pause')),
                ('is_first_pause', models.BooleanField(default=True, verbose_name='Is first char pause')),
                ('is_second_pause', models.BooleanField(default=False, verbose_name='Is second char pause')),
                ('is_break_second', models.BooleanField(default=False, help_text='Overload on finish logic', verbose_name='Break second char plan')),
                ('is_important_event', models.BooleanField(default=False)),
                ('is_ignore_event', models.BooleanField(default=False)),
                ('time_pause', models.FloatField(blank=True, null=True, verbose_name='Pause before the next attempt in minutes')),
                ('min_points', models.PositiveSmallIntegerField(default=101, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)], verbose_name='Minimum points')),
                ('on_finish_first', models.CharField(blank=True, choices=[('next_stage', 'Next stage'), ('break', 'Break')], default='next_stage', max_length=10)),
                ('on_finish_second', models.CharField(blank=True, choices=[('next_stage', 'Next stage'), ('break', 'Break')], max_length=10)),
                ('event_desc', models.CharField(blank=True, max_length=255)),
                ('ask_player_desc', models.CharField(blank=True, max_length=255)),
                ('beginning_text', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='PlanEffects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_instant', models.BooleanField(default=False)),
            ],
            bases=(models.Model, main.utils.DescMixin),
        ),
        migrations.CreateModel(
            name='PlanFilters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_from', models.TimeField(blank=True, null=True, verbose_name='Time to start')),
                ('time_from_seconds', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Time to finish seconds')),
                ('time_to', models.TimeField(blank=True, null=True, verbose_name='Time to finish')),
                ('time_to_seconds', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Time to finish seconds')),
                ('time_min', models.TimeField(blank=True, null=True, verbose_name='Stay in place min')),
                ('time_min_seconds', models.PositiveSmallIntegerField(editable=False, null=True, verbose_name='Stay in place min seconds')),
                ('time_max', models.TimeField(blank=True, null=True, verbose_name='Stay in place max')),
                ('time_max_seconds', models.PositiveSmallIntegerField(editable=False, null=True, verbose_name='Stay in place max seconds')),
                ('is_time_points', models.BooleanField(default=False, verbose_name='Is day time influence on points')),
                ('is_group', models.BooleanField(blank=True, default=True, help_text='Disable to not create a group but keep second char filter')),
                ('first_character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_filters_first_character', to='main.characterdatafilters')),
                ('second_character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_filters_second_character', to='main.characterdatafilters')),
            ],
            bases=(models.Model, main.utils.DescMixin),
        ),
        migrations.CreateModel(
            name='PlanLock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50, verbose_name='Title')),
                ('close_filters', models.JSONField(blank=True, default=dict, help_text='Example: {"id": "_place_id"}', verbose_name='Lock filters')),
                ('open_filters', models.JSONField(blank=True, default=dict, help_text='Example: {"position__title": "soldier"}', verbose_name='Open filters')),
            ],
            bases=(models.Model, main.utils.DescMixin),
        ),
        migrations.CreateModel(
            name='PlanPause',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first', models.JSONField(blank=True, default=dict)),
                ('second', models.JSONField(blank=True, default=dict, help_text='Example: {"relax": 30, "talk": 30}')),
            ],
            bases=(models.Model, main.utils.DescMixin),
        ),
        migrations.CreateModel(
            name='PlanPlaceFilters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50, verbose_name='Title')),
                ('is_random', models.BooleanField(default=False)),
                ('is_nearest', models.BooleanField(default=False, help_text='Overrides distance penalty.')),
                ('is_teleportation', models.BooleanField(default=False)),
                ('distance_penalty', models.PositiveSmallIntegerField(blank=True, default=10, help_text='Per kilometer.', null=True)),
                ('filters', models.JSONField(blank=True, default=dict, verbose_name='Place filters')),
                ('attrs_importance', models.JSONField(blank=True, default=dict, help_text='Example: {"beauty": 0.3, "fertility": 0.3, "safety": 0.4}', verbose_name='Place stats importance')),
                ('max_distance', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Maximum distance(including)')),
            ],
            bases=(models.Model, main.utils.DescMixin),
        ),
        migrations.CreateModel(
            name='PlanSetFilters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_filters_first', to='main.characterdataplanfilters')),
                ('second_character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_filters_second', to='main.characterdataplanfilters')),
            ],
            bases=(models.Model, main.utils.DescMixin),
        ),
        migrations.CreateModel(
            name='SettlementPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_voting', models.BooleanField(default=False, verbose_name='Is voting position')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='Title')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('name_female', models.CharField(blank=True, max_length=100, verbose_name='Name female')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('character_filters', models.JSONField(blank=True, default=dict, verbose_name='Characters filters')),
                ('points_mods', models.JSONField(blank=True, default=dict, help_text='Example: {"positive": {"max": ["magic", "fighting"], "exact": "energy"}} Options: positive/negative, max/min/avg/exact.', verbose_name='Points from character attrs')),
                ('value', models.PositiveSmallIntegerField(default=500, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)], verbose_name='Value of position')),
                ('min_number', models.PositiveSmallIntegerField(default=1)),
                ('max_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('population_ratio', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Additional number depending on population')),
            ],
        ),
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50)),
                ('is_optional', models.BooleanField(blank=True, default=False)),
                ('time_pause', models.FloatField(blank=True, help_text='If stage failed. "-1" will disable plan.', null=True, verbose_name='Pause minutes')),
                ('effects', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.planeffects')),
                ('filters', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.planfilters')),
                ('filters_place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.planplacefilters')),
                ('filters_plan_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.plansetfilters')),
                ('lock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.planlock')),
                ('plan_pause', models.ForeignKey(blank=True, help_text='Ignoring if stage is optional.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.planpause')),
            ],
        ),
        migrations.CreateModel(
            name='Settlement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='Title')),
                ('gold', models.PositiveIntegerField(default=1000, verbose_name='Gold')),
                ('is_positions_set_required', models.BooleanField(default=False)),
                ('positions', models.ManyToManyField(blank=True, to='main.SettlementPosition')),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_targeted', models.BooleanField(blank=True, default=False, editable=False, help_text='The route with single possible place to finish, used to disable bypassing the locked place')),
                ('route_distance', models.FloatField(default=0.0, verbose_name='Route distance')),
                ('distance_passed', models.FloatField(default=0.0, verbose_name='Distance passed')),
                ('places', models.JSONField(default=dict)),
                ('status', models.CharField(blank=True, choices=[('in_progress', 'In progress'), ('finished', 'Finished'), ('not_found', 'Not found'), ('locked', 'Locked')], default='in_progress', max_length=11)),
                ('first_character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_first_character', to='main.character')),
                ('second_character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='route_character_second', to='main.character')),
                ('start_place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='route_start_place', to='main.place')),
            ],
        ),
        migrations.CreateModel(
            name='PlanEffectsSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='Title')),
                ('five', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='effects_set_five', to='main.characterdataeffects')),
                ('four', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='effects_set_four', to='main.characterdataeffects')),
                ('one', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='effects_set_one', to='main.characterdataeffects')),
                ('three', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='effects_set_three', to='main.characterdataeffects')),
                ('two', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='effects_set_two', to='main.characterdataeffects')),
            ],
            bases=(models.Model, main.utils.DescMixin),
        ),
        migrations.AddField(
            model_name='planeffects',
            name='first_character',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_effects_set_first_character', to='main.planeffectsset'),
        ),
        migrations.AddField(
            model_name='planeffects',
            name='second_character',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_effects_set_second_character', to='main.planeffectsset'),
        ),
        migrations.CreateModel(
            name='PlanData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_stage', models.CharField(choices=[('one', 'One'), ('two', 'Two'), ('three', 'Three'), ('four', 'Four'), ('five', 'Five')], default='one', max_length=10, verbose_name='Plan stage order')),
                ('first_character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_data_first_character', to='main.character')),
                ('first_previous', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_data_first_previous', to='main.plandata')),
                ('first_route', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_data_first_route', to='main.route')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.plan')),
                ('second_character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_data_second_character', to='main.character')),
                ('second_previous', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_data_second_previous', to='main.plandata')),
                ('second_route', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plan_data_second_route', to='main.route')),
            ],
        ),
        migrations.AddField(
            model_name='plan',
            name='filters',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='plan_filters', to='main.planfilters'),
        ),
        migrations.AddField(
            model_name='plan',
            name='five',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stage_five', to='main.stage'),
        ),
        migrations.AddField(
            model_name='plan',
            name='four',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stage_four', to='main.stage'),
        ),
        migrations.AddField(
            model_name='plan',
            name='one',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='stage_one', to='main.stage'),
        ),
        migrations.AddField(
            model_name='plan',
            name='three',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stage_three', to='main.stage'),
        ),
        migrations.AddField(
            model_name='plan',
            name='two',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stage_two', to='main.stage'),
        ),
        migrations.AddField(
            model_name='place',
            name='settlement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.settlement'),
        ),
        migrations.CreateModel(
            name='FactionRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveSmallIntegerField(default=500, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)])),
                ('from_faction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationship_from_faction', to='main.faction')),
                ('to_faction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationship_to_faction', to='main.faction')),
            ],
            options={
                'unique_together': {('from_faction', 'to_faction')},
            },
        ),
        migrations.AddField(
            model_name='faction',
            name='relationships',
            field=models.ManyToManyField(related_name='_main_faction_relationships_+', through='main.FactionRelationship', to='main.Faction'),
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_important', models.BooleanField(default=False)),
                ('timestamp', models.PositiveIntegerField()),
                ('first_character', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_log_first_character', to='main.character')),
                ('place', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.place')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.plan')),
                ('second_character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_log_second_character', to='main.character')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveSmallIntegerField(default=500, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000)], verbose_name='Value')),
                ('from_character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationship_from_character', to='main.character')),
                ('to_character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationship_to_character', to='main.character')),
            ],
            options={
                'unique_together': {('from_character', 'to_character')},
            },
        ),
        migrations.AddField(
            model_name='character',
            name='faction',
            field=models.ForeignKey(default=2, on_delete=django.db.models.deletion.PROTECT, to='main.faction'),
        ),
        migrations.AddField(
            model_name='character',
            name='place',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.place'),
        ),
        migrations.AddField(
            model_name='character',
            name='plan_data',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.plandata'),
        ),
        migrations.AddField(
            model_name='character',
            name='position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.settlementposition'),
        ),
        migrations.AddField(
            model_name='character',
            name='relationships',
            field=models.ManyToManyField(blank=True, related_name='_main_character_relationships_+', through='main.CharacterRelationship', to='main.Character'),
        ),
        migrations.AddField(
            model_name='character',
            name='settlement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.settlement'),
        ),
        migrations.CreateModel(
            name='PlaceTransition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField(default=1, verbose_name='Distance kilometers')),
                ('from_place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_place', related_query_name='from_place', to='main.place')),
                ('to_place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_place', related_query_name='to_place', to='main.place')),
            ],
            options={
                'unique_together': {('from_place', 'to_place')},
            },
        ),
    ]
